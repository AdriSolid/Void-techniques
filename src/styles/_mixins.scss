@mixin respond-to($media) {
  @if $media == mobile {
    @media only screen and (max-width: 415px) {
      @content;
    }
  }
}

@mixin flex() {
  display: -webkit-box; 
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex; 
  display: flex;
}

@mixin direction($value) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin justify($value) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

@mixin align-content($value) {
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

@mixin align-self($value) {
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin flex-definition($direction, $justify, $align) {
  @include flex();
  
  @if $direction {
    @include direction($direction);
  }

  @if $justify {
    @include justify($justify);
  }

  @if $align {
    @include align-items($align);
  }
}

@mixin grid-definition($min, $max) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min, $max));
  grid-gap: 1rem;
  grid-auto-flow: dense;
  padding: 5rem;
}

@mixin keyframes-definition($animationName) {
  @-webkit-keyframes #{$animationName} {
      @content;
  }
  @-moz-keyframes #{$animationName} {
      @content;
  }
  @-o-keyframes #{$animationName} {
      @content;
  }
  @keyframes #{$animationName} {
      @content;
  }
}

@mixin transition-definition($definition) {
  -moz-transition: $definition;
  -webkit-transition: $definition;
  -o-transition: $definition;
  transition: $definition;
}

@mixin animation-definition($definition) {
  -moz-animation: $definition;
  -webkit-animation: $definition;
  -o-animation: $definition;
  animation: $definition;
}

@mixin animation-delay-definition($definition) {
  -moz-animation-delay: $definition;
  -webkit-animation-delay: $definition;
  -o-animation-delay: $definition;
  animation-delay: $definition;
}

@mixin transform-definition($definition) {
  -moz-transform: $definition;
  -webkit-transform: $definition;
  -o-transform: $definition;
  transform: $definition;
}

@mixin transform-style-definition($definition) {
  -moz-transform-style: $definition;
  -webkit-transform-style: $definition;
  -o-transform-style: $definition;
  transform-style: $definition;
}
